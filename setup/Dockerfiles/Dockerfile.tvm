FROM own/base

RUN apt update && apt install -y \
    git \
    wget \
    g++ \
    cmake \
    ccache \
    ninja-build \
    zlib1g-dev \
    libzstd-dev \
    libxml2-dev && \
    apt clean

ARG BUILD_CONFIG_DIR=/tmp/setup
ARG RC=/root/.bashrc
COPY ./setup/tvm ${BUILD_CONFIG_DIR}


# 1. install LLVM
# https://apt.llvm.org/
# TVM requires LLVM for CPU codegen.
# RUN apt update && apt install -y \
#     lsb-release \
#     software-properties-common \
#     gnupg && \
#     wget https://apt.llvm.org/llvm.sh && \
#     chmod +x llvm.sh && \
#     ./llvm.sh all && \
#     rm llvm.sh


# 2. install python3.8
# RUN apt update && apt install -y libssl-dev && \
#     # apt remove -y python3 && apt -y autoremove && \
#     wget https://www.python.org/ftp/python/3.8.10/Python-3.8.10.tgz && \
#     tar -zxf Python-3.8.10.tgz && \
#     cd Python-3.8.10 && \
#     ./configure && \
#     make && make install && \
#     /usr/local/bin/python3.8 -m pip install --upgrade pip && \
#     pip3 install PyYAML && \
#     rm -r /root/Python-3.8.10*


# 3. create virtual environment from file
# 使用 conda 安装 python3.8 和 LLVM，可以安装 CUDA
ARG CONDA_VENV_FILE=${BUILD_CONFIG_DIR}/ai-build.yml
RUN . ${RC} && conda env create -f ${CONDA_VENV_FILE} && \
    echo 'conda activate ai' >> ${RC} && \
    conda clean --all -y 


# 4. build tvm
ARG TVM_DIR=/opt/tvm
ARG TVM_CMAKE_CONFIG_FILE=${BUILD_CONFIG_DIR}/config.cmake
# (1) download tvm source code
# --depth 1 表示只需要最新的代码而不需要完整的历史记录
# --branch release/x.x
RUN git clone --recursive https://github.com/apache/tvm ${TVM_DIR}
# (2) build
WORKDIR ${TVM_DIR}/build
RUN cp ${TVM_CMAKE_CONFIG_FILE} . && \
    . ${RC} && \
    cmake -G Ninja .. && ninja
# cmake .. && make
ENV TVM_HOME=${TVM_DIR}
ENV PYTHONPATH=${TVM_HOME}/python:${PYTHONPATH}
# Libraries have been installed in: /root/tvm/build/libbacktrace/lib

# If you ever happen to want to link against installed libraries
# in a given directory, LIBDIR, you must either use libtool, and
# specify the full pathname of the library, or use the `-LLIBDIR'
# flag during linking and do at least one of the following:
#    - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
#      during execution
#    - add LIBDIR to the `LD_RUN_PATH' environment variable
#      during linking
#    - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
#    - have your system administrator add LIBDIR to `/etc/ld.so.conf'