# 容器主机上应该安装有 nvidia_container_toolkit，同时应具备显卡驱动。
# plugins: coding prompt -> clangd
#          cpp debug     -> C/C++
#          cuda debug    -> Nsight Visual Studio Code Edition
FROM ubuntu:20.04

RUN echo 'root:123' | chpasswd

COPY ./scripts/apt-install /usr/local/bin/apt-install

RUN apt-install ca-certificates && \
    sed -i \
    -e 's#http://archive.ubuntu.com/ubuntu/#https://mirrors.ustc.edu.cn/ubuntu/#' \
    -e 's#http://security.ubuntu.com/ubuntu/#https://mirrors.ustc.edu.cn/ubuntu/#' \
    /etc/apt/sources.list

RUN export DEBIAN_FRONTEND=noninteractive && \
    apt update --fix-missing && apt -y upgrade && \
    apt-install \
    tzdata \
    openssh-server && \
    ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

RUN echo "PermitRootLogin yes" >> /etc/ssh/sshd_config && \
    echo "PubkeyAuthentication yes" >> /etc/ssh/sshd_config && \
    /etc/init.d/ssh restart

# in serveral stages are better.
# COPY ./modules /modules
COPY ./.vimrc /root

ARG WORKSPACE=/usr/local
WORKDIR ${WORKSPACE}


# CMD tools
COPY ./modules/tools/InstallOtherTools.sh /modules/tools/
RUN bash /modules/tools/InstallOtherTools.sh


# CMake
ARG CMAKE_INSTALL_PATH=${WORKSPACE}/cmake
COPY ./modules/tools/InstallCMake.sh /modules/tools/
RUN bash /modules/tools/InstallCMake.sh ${CMAKE_INSTALL_PATH}
ENV PATH=${CMAKE_INSTALL_PATH}/bin:${PATH}


# GTest
COPY ./modules/tools/InstallGTest.sh /modules/tools/
RUN bash /modules/tools/InstallGTest.sh


# LLVM
COPY ./modules/tools/InstallLLVM.sh /modules/tools/
RUN bash /modules/tools/InstallLLVM.sh


# Pip3
COPY ./modules/InstallPipPkgs.sh /modules/
RUN bash /modules/InstallPipPkgs.sh


# CUDA、cuDNN
ARG CUDA_MAJOR_VERSION=11
ARG CUDA_MINOR_VERSION=8
ARG CUDA_PATCH_VERSION=0

ARG CUDA_INSTALL_PATH=${WORKSPACE}/cuda
ARG CUDNN_INSTALL_PATH=${WORKSPACE}/cudnn
COPY ./modules/nvidia/InstallCUDA.sh /modules/nvidia/
RUN bash /modules/nvidia/InstallCUDA.sh ${CUDA_MAJOR_VERSION} ${CUDA_MINOR_VERSION}
ENV PATH=${CUDA_INSTALL_PATH}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_INSTALL_PATH}/lib64:${CUDNN_INSTALL_PATH}/lib
ENV CXX_INCLUDE_DIRS=${CUDNN_INSTALL_PATH}/include


# TensorRT
ARG TENSORRT_INSTALL_PATH=${WORKSPACE}/tensorrt
COPY ./modules/nvidia/InstallTensorRT.sh /modules/nvidia/
RUN bash /modules/nvidia/InstallTensorRT.sh ${CUDA_MAJOR_VERSION} ${CUDA_MINOR_VERSION}
ENV LD_LIBRARY_PATH=${TENSORRT_INSTALL_PATH}/lib:${LD_LIBRARY_PATH}
ENV CXX_INCLUDE_DIRS=${TENSORRT_INSTALL_PATH}/include:${CXX_INCLUDE_DIRS}


# Pytorch
ARG LIBTORCH_INSTALL_PATH=${WORKSPACE}/libtorch
COPY ./modules/InstallPytorch.sh /modules/
RUN bash /modules/InstallPytorch.sh ${CUDA_MAJOR_VERSION} ${CUDA_MINOR_VERSION}
ENV CXX_INCLUDE_DIRS=${LIBTORCH_INSTALL_PATH}/include:${CXX_INCLUDE_DIRS}


# TVM
COPY ./config.cmake /tmp
ARG TVM_INSTALL_PATH=${WORKSPACE}/tvm
COPY ./modules/InstallTVM.sh /modules/
RUN bash /modules/InstallTVM.sh \
    ${CUDA_INSTALL_PATH} \
    ${CUDNN_INSTALL_PATH} \
    ${TENSORRT_INSTALL_PATH} \
    ${LIBTORCH_INSTALL_PATH}
ENV TVM_HOME=${TVM_INSTALL_PATH}
ENV PYTHONPATH=${TVM_HOME}/python:${PYTHONPATH}


# Rust
COPY ./modules/InstallRust.sh /modules/
RUN  /modules/InstallRust.sh


RUN rm -rf /modules
COPY ./scripts/mcc /usr/local/bin/mcc

WORKDIR /root
CMD ["/usr/sbin/sshd", "-D"]